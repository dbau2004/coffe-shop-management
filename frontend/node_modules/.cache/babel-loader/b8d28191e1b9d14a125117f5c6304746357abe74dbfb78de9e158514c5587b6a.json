{"ast":null,"code":"const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8080';\nexport const login = async (username, password) => {\n  const response = await fetch(`${API_URL}/api/auth/login`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      username,\n      password\n    })\n  });\n  if (!response.ok) throw new Error('Login failed');\n  return response.text();\n};\nexport const register = async (username, password) => {\n  const response = await fetch(`${API_URL}/api/auth/register`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      username,\n      password,\n      role: 'ROLE_USER'\n    })\n  });\n  if (!response.ok) throw new Error('Registration failed');\n};\nexport const fetchUsers = async token => {\n  const response = await fetch(`${API_URL}/api/admin/users`, {\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  });\n  if (!response.ok) throw new Error('Failed to fetch users');\n  return response.json();\n};\nexport const fetchTables = async token => {\n  const response = await fetch(`${API_URL}/api/admin/tables`, {\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  });\n  if (!response.ok) throw new Error('Failed to fetch tables');\n  return response.json();\n};\nexport const createTable = async (token, tableData) => {\n  const response = await fetch(`${API_URL}/api/admin/tables`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${token}`\n    },\n    body: JSON.stringify(tableData)\n  });\n  if (!response.ok) throw new Error('Failed to create table');\n};","map":{"version":3,"names":["API_URL","process","env","REACT_APP_API_URL","login","username","password","response","fetch","method","headers","body","JSON","stringify","ok","Error","text","register","role","fetchUsers","token","Authorization","json","fetchTables","createTable","tableData"],"sources":["D:/LTW2/coffee-shop-management/frontend/src/api.js"],"sourcesContent":["const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8080';\r\n\r\nexport const login = async (username, password) => {\r\n    const response = await fetch(`${API_URL}/api/auth/login`, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ username, password }),\r\n    });\r\n    if (!response.ok) throw new Error('Login failed');\r\n    return response.text();\r\n};\r\n\r\nexport const register = async (username, password) => {\r\n    const response = await fetch(`${API_URL}/api/auth/register`, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ username, password, role: 'ROLE_USER' }),\r\n    });\r\n    if (!response.ok) throw new Error('Registration failed');\r\n};\r\n\r\nexport const fetchUsers = async (token) => {\r\n    const response = await fetch(`${API_URL}/api/admin/users`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n    });\r\n    if (!response.ok) throw new Error('Failed to fetch users');\r\n    return response.json();\r\n};\r\n\r\nexport const fetchTables = async (token) => {\r\n    const response = await fetch(`${API_URL}/api/admin/tables`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n    });\r\n    if (!response.ok) throw new Error('Failed to fetch tables');\r\n    return response.json();\r\n};\r\n\r\nexport const createTable = async (token, tableData) => {\r\n    const response = await fetch(`${API_URL}/api/admin/tables`, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            Authorization: `Bearer ${token}`,\r\n        },\r\n        body: JSON.stringify(tableData),\r\n    });\r\n    if (!response.ok) throw new Error('Failed to create table');\r\n};"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,uBAAuB;AAExE,OAAO,MAAMC,KAAK,GAAG,MAAAA,CAAOC,QAAQ,EAAEC,QAAQ,KAAK;EAC/C,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGR,OAAO,iBAAiB,EAAE;IACtDS,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAER,QAAQ;MAAEC;IAAS,CAAC;EAC/C,CAAC,CAAC;EACF,IAAI,CAACC,QAAQ,CAACO,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,cAAc,CAAC;EACjD,OAAOR,QAAQ,CAACS,IAAI,CAAC,CAAC;AAC1B,CAAC;AAED,OAAO,MAAMC,QAAQ,GAAG,MAAAA,CAAOZ,QAAQ,EAAEC,QAAQ,KAAK;EAClD,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGR,OAAO,oBAAoB,EAAE;IACzDS,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAER,QAAQ;MAAEC,QAAQ;MAAEY,IAAI,EAAE;IAAY,CAAC;EAClE,CAAC,CAAC;EACF,IAAI,CAACX,QAAQ,CAACO,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,qBAAqB,CAAC;AAC5D,CAAC;AAED,OAAO,MAAMI,UAAU,GAAG,MAAOC,KAAK,IAAK;EACvC,MAAMb,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGR,OAAO,kBAAkB,EAAE;IACvDU,OAAO,EAAE;MAAEW,aAAa,EAAE,UAAUD,KAAK;IAAG;EAChD,CAAC,CAAC;EACF,IAAI,CAACb,QAAQ,CAACO,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;EAC1D,OAAOR,QAAQ,CAACe,IAAI,CAAC,CAAC;AAC1B,CAAC;AAED,OAAO,MAAMC,WAAW,GAAG,MAAOH,KAAK,IAAK;EACxC,MAAMb,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGR,OAAO,mBAAmB,EAAE;IACxDU,OAAO,EAAE;MAAEW,aAAa,EAAE,UAAUD,KAAK;IAAG;EAChD,CAAC,CAAC;EACF,IAAI,CAACb,QAAQ,CAACO,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,wBAAwB,CAAC;EAC3D,OAAOR,QAAQ,CAACe,IAAI,CAAC,CAAC;AAC1B,CAAC;AAED,OAAO,MAAME,WAAW,GAAG,MAAAA,CAAOJ,KAAK,EAAEK,SAAS,KAAK;EACnD,MAAMlB,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGR,OAAO,mBAAmB,EAAE;IACxDS,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACL,cAAc,EAAE,kBAAkB;MAClCW,aAAa,EAAE,UAAUD,KAAK;IAClC,CAAC;IACDT,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACY,SAAS;EAClC,CAAC,CAAC;EACF,IAAI,CAAClB,QAAQ,CAACO,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,wBAAwB,CAAC;AAC/D,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}